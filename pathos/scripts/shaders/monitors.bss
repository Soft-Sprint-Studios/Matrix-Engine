$global_determinator fog 0 1
$shader_vertex $begin
#version 460

uniform mat4 projection;
uniform mat4 modelview;

in vec4 in_position;
in vec2 in_texcoord;

out vec2 ps_texcoord;
out vec3 ps_vertexpos;

void main()
{
	ps_texcoord = in_texcoord;

	vec4 position = in_position*modelview;

	$branch fog == 1
	$begin
		ps_vertexpos = position.xyz;
	$end

	gl_Position = position*projection;
}
$end
$shader_fragment
$determinator grayscale 0 1
$begin
#version 460

uniform sampler2D texture0;
uniform sampler2D scantexture;

uniform vec2 fogparams;
uniform vec3 fogcolor;

in vec2 ps_texcoord;
in vec3 ps_vertexpos;

out vec4 oColor;

float SplineFraction( float value, float scale )
{
	float valueSquared;

	value = scale * value;
	valueSquared = value * value;

	// Nice little ease-in, ease-out spline-like curve
	return 3 * valueSquared - 2 * valueSquared * value;
}

void main()
{
	vec4 texColor = texture(texture0, ps_texcoord);
	$branch grayscale == 0
	$begin
		vec4 finalColor = texColor;
	$end
	$branch grayscale == 1
	$begin
		vec3 weights = vec3(0.320000, 0.590000, 0.090000);
		
		vec4 finalColor;
		finalColor.x = dot(texColor.xyz, weights);
		finalColor.y = dot(texColor.xyz, weights);
		finalColor.z = dot(texColor.xyz, weights);
		finalColor.w = texColor.w;
	$end
	
	vec4 scanColor = texture(scantexture, ps_texcoord);
	finalColor.xyz = mix(finalColor.xyz, scanColor.xyz, scanColor.w);
	
	$branch fog == 1
	$begin
		float fogcoord = length(ps_vertexpos);
		
		float fogfactor = (fogparams.x - fogcoord)*fogparams.y;
		fogfactor = 1.0-SplineFraction(clamp(fogfactor, 0.0, 1.0), 1.0);
		
		finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
	$end

	oColor = finalColor;
}
$end