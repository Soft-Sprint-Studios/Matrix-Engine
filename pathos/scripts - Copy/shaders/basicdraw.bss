$global_determinator texture 0 1
$global_determinator fog 0 1
$shader_vertex $begin
#version 460

uniform mat4 projection;
uniform mat4 modelview;

in vec4 in_position;
in vec2 in_texcoord;
in vec4 in_color;

out vec4 ps_color;
out vec2 ps_texcoord;
out vec3 ps_vertexpos;

void main()
{
$branch texture == 1
$begin
	ps_texcoord = in_texcoord;
$end

	ps_color = in_color;
	vec4 position = in_position*modelview;
	
	$branch fog == 1
	$begin
		ps_vertexpos = position.xyz;
	$end	
	
	gl_Position = position*projection;
}
$end
$shader_fragment 
$determinator rectangle 0 1
$begin
#version 460
#extension GL_ARB_texture_rectangle : enable
$branch texture == 1
$begin
	$branch rectangle == 0
	$begin
		uniform sampler2D texture0;
	$end
	$branch rectangle == 1
	$begin
		uniform sampler2DRect rectangle0;
	$end
$end

uniform vec2 fogparams;
uniform vec3 fogcolor;
uniform float multiplier;

in vec4 ps_color;
in vec2 ps_texcoord;
in vec3 ps_vertexpos;

out vec4 oColor;

float SplineFraction( float value, float scale )
{
	float valueSquared;

	value = scale * value;
	valueSquared = value * value;

	// Nice little ease-in, ease-out spline-like curve
	return 3 * valueSquared - 2 * valueSquared * value;
}

void main()
{
	vec4 finalColor = vec4(1.0, 1.0, 1.0, 1.0);
$branch texture == 1
$begin
	$branch rectangle == 0
	$begin
		finalColor = texture(texture0, ps_texcoord);
	$end
	$branch rectangle == 1
	$begin
		finalColor = texture(rectangle0, ps_texcoord);
	$end
$end

	finalColor = finalColor*ps_color*multiplier;
	
	$branch fog == 1
	$begin
		float fogcoord = length(ps_vertexpos);
		
		float fogfactor = (fogparams.x - fogcoord)*fogparams.y;
		fogfactor = 1.0-SplineFraction(clamp(fogfactor, 0.0, 1.0), 1.0);
		
		finalColor.xyz = mix(finalColor.xyz, fogcolor, fogfactor);
	$end	
	
	oColor = finalColor;
}
$end